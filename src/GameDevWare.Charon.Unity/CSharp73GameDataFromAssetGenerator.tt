<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#
	// ReSharper disable All
	this.ToolsVersion = this.ToolsVersion ?? this.GetType().Assembly.GetName().Version.ToString();
	this.ToolsName = this.ToolsName ?? this.GetType().Assembly.GetName().Name;
	this.GameDataClassName = this.GameDataClassName ?? "GameData";
	this.AssetClassName = this.AssetClassName ?? "GameDataAsset";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace <#= this.Namespace #>
{
	using System;
	using System.IO;
	using System.Text;
	using UnityEngine;

	[Serializable]
    [global::System.CodeDom.Compiler.GeneratedCode("<#= this.ToolsName #>", "<#= this.ToolsVersion #>")]
	public partial class <#= this.AssetClassName #> : ScriptableObject, ISerializationCallbackReceiver
	{
		[SerializeField, HideInInspector]
		private byte[] dataBytes; // is set by asset creator via reflection
		[SerializeField, HideInInspector]
		private string extension; // is set by asset creator via reflection
		[NonSerialized, HideInInspector]
		public <#= this.GameDataClassName #> GameData;

		private <#= this.AssetClassName #>()
		{

		}

		void ISerializationCallbackReceiver.OnBeforeSerialize()
		{
		}
		void ISerializationCallbackReceiver.OnAfterDeserialize()
		{
			var data = new MemoryStream(dataBytes, 0, dataBytes.Length, false);
#pragma warning disable 0618
			switch (this.extension.Trim('.'))
			{
				case "gdjs":
				case "json":
					this.GameData = new <#= this.GameDataClassName #>(data, new Formatters.GameDataLoadOptions { Format = Formatters.Format.Json });
					break;
				case "gdmp":
				case "msgpack":
				case "msgpck":
					this.GameData = new <#= this.GameDataClassName #>(data, new Formatters.GameDataLoadOptions { Format = Formatters.Format.MessagePack });
					break;
				default:
					throw new InvalidOperationException(string.Format("Unknown file extension '{0}'. Unable to determine file format by extension.",
						this.extension));
			}
#pragma warning restore 0618
		}
	}
}

<#+ 
	
	public string ToolsVersion { get; set; }
	public string ToolsName { get; set; }

	public string Namespace { get; set; }
	public string AssetClassName { get; set; }
	public string GameDataClassName { get; set; }
#>
